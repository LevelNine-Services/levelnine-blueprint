{
  "name": "LevelNine-Services Blueprint",
  "description": "Cloud-Native AI SaaS Blueprint for Codex and GitHub Actions",
  "version": "1.0.0",
  "content_type": "text/markdown",
  "content": "# üß© LevelNine-Services ‚Äì Cloud-Native AI SaaS Blueprint\n\nThis repository is the **central blueprint** for the entire LevelNine-Services ecosystem ‚Äî defining its **architecture, environments, automation flows, and ChatOps model**.  \nIt enables *zero-local* setup: all execution happens in **GitHub Actions**, **Vercel**, **Fly.io**, and **OpenTofu**, orchestrated through **AI-assisted Codex automation**.\n\n---\n\n## üìú Vision\n\nBuild a **modular, AI-centric SaaS platform** with:\n- Zero-local development (cloud-first)\n- Codex-controlled automation via ChatOps\n- Multi-repo, multi-environment orchestration\n- Central MCP (Model Context Protocol) AI gateway\n- Secure, reproducible, and observable infrastructure\n\n---\n\n## ‚öôÔ∏è High-Level Architecture\n\n```mermaid\nflowchart TD\n  subgraph CLIENT[\"Frontend ‚Äì Astro + SolidJS (Vercel ¬∑ Bun)\"]\n    UI[Astro UI / Chat / Dashboard]\n    AUTH[Auth.js ¬∑ Supabase]\n    UI -->|\"HTTPS / JWT\"| API\n  end\n\n  subgraph API[\"Backend ‚Äì Fastify + pnpm (Fly.io)\"]\n    API_CORE[API Services]\n    DB[(Postgres / pgvector)]\n    CACHE[(Redis)]\n    API_CORE --> DB\n    API_CORE --> CACHE\n    API_CORE --> MCP\n  end\n\n  subgraph AGENT[\"Agent-Core (MCP Server)\"]\n    MCP[\"üß† Model Context Protocol Server\"]\n    ROUTER[\"LLM / TTS / Vision Router\"]\n    PROVIDERS[\"Ollama ¬∑ OpenAI ¬∑ ElevenLabs ¬∑ Stability\"]\n    MCP --> ROUTER --> PROVIDERS\n    ROUTER --> DB\n  end\n\n  subgraph INFRA[\"Infrastructure (OpenTofu ¬∑ Terragrunt ¬∑ GH Actions)\"]\n    TOFU[OpenTofu]\n    TERR[Terragrunt]\n    GH[GitHub Actions]\n    TOFU --> TERR --> GH\n  end\n\n  CLIENT --> API\n  API --> MCP\n  MCP --> DB\n  INFRA -->|provisions| API\n  INFRA -->|deploys| CLIENT\n```\n\n---\n\n## üß± Repository Layout\n\n| Repo | Purpose | Stack | Package Manager | Deployment |\n|------|----------|--------|----------------|-------------|\n| frontend | User interface | Astro + SolidJS + Tailwind | Bun | Vercel |\n| api | REST / SSE backend | Fastify + TypeScript | pnpm | Fly.io |\n| agent-core | AI / MCP gateway | TypeScript + MCP SDK | pnpm | Fly.io |\n| infra | IaC / CI-CD | OpenTofu + Terragrunt | npm | GitHub Actions |\n| blueprint | Central coordination | Markdown + YAML + Shell | ‚Äî | GitHub-hosted |\n\n---\n\n## ‚òÅÔ∏è Environments\n\n| Tier | DB | Region | Notes |\n|------|----|--------|-------|\n| Demo | Supabase | us-east-1 | Public sandbox |\n| Dev | Neon.tech | us-east-1 | Branchable development |\n| Test | Render PG | Oregon | Pre-production testing |\n| Prod | Fly.io PG | Dallas / IAD | Private networking |\n\n---\n\n## üß© ChatOps Command Reference\n\nYou or Codex can execute infra actions directly from GitHub comments:\n\n| Command | Description |\n|----------|-------------|\n| `/bootstrap CONFIRM=YES env=dev` | Create base repos and seed configs |\n| `/deploy env=dev` | Trigger Vercel + Fly deploys |\n| `/db:provision env=demo` | Provision database |\n| `/secrets:sync` | Sync secrets across repos |\n| `/rotate-secrets` | Rotate keys and API tokens |\n\nAll commands run inside **GitHub Actions** using whitelisted actors in `.github/workflows/chatops.yml`.\n\n---\n\n## üîê Security Overview\n\n- Auth: Supabase Auth for users, JWT for APIs  \n- Secrets: Stored in GitHub and propagated via CI  \n- Database: Postgres + pgvector + Row-Level Security  \n- Isolation: Separate schemas per service (api, agent, mcp, frontend)  \n- Rotation: Automated via `rotate-secrets.yml`  \n- Access: Protected branches, signed commits, limited ChatOps actors  \n\n---\n\n## üß™ Testing and Validation\n\n| Type | Tool | Purpose |\n|------|------|----------|\n| Unit | Vitest / Bun test | Fast local validation |\n| Integration | Supertest / Playwright | API and UI |\n| IaC | tofu plan / Checkov | Terraform checks |\n| Security | CodeQL / Trivy | Code and image scanning |\n| AI Consistency | Snapshot tests | Model output regression |\n\n---\n\n## üß≠ Workflow Summary\n\n| Workflow | Purpose | Trigger |\n|-----------|----------|----------|\n| chatops.yml | ChatOps slash commands | issue/PR comment |\n| bootstrap.yml | Manual repo bootstrap | workflow_dispatch |\n| plan.yml | OpenTofu plan | Pull request on terraform files |\n| apply.yml | Apply infra changes | Manual dispatch |\n| rotate-secrets.yml | Secrets rotation | Nightly cron |\n| verify-env.sh | Validate environment variables | CI validation |\n\n---\n\n## üóÑÔ∏è Infrastructure as Code\n\nDirectory structure:\n\n```\nterraform/\n  modules/\n    fly-app/\n    vercel-project/\n    database/\n    redis/\n  environments/\n    demo/\n    dev/\n    test/\n    prod/\n```\n\nExample commands:\n\n```\ntofu init -input=false\ntofu plan -input=false\ntofu apply -auto-approve\n```\n\n---\n\n## üß∞ Provider Configuration\n\nExample provider routing:\n\n```\nllm: [openai, anthropic, ollama]\nvision: [openai, stability]\ntts: [elevenlabs, openai]\nstt: [openai-whisper]\nrouting:\n  text.default: openai\n  text.fallback: ollama\n  tts.default: elevenlabs\n```\n\n---\n\n## üåç Environment Variables Manifest\n\nPublic variables:\n\n```\nNEXT_PUBLIC_API_URL\nNEXT_PUBLIC_MCP_URL\n```\n\nSecrets (kept in GitHub):\n\n```\nDATABASE_URL\nJWT_SECRET\nOPENAI_API_KEY\nELEVENLABS_API_KEY\nSTABILITY_API_KEY\n```\n\nCloud targets: GitHub, Fly.io, Vercel\n\n---\n\n## üîÑ Zero-Local Development Principle\n\n**‚ÄúNothing local. Everything cloud-executed.‚Äù**\n\n- All CLIs (gh, flyctl, vercel, supabase, tofu) run in CI/CD  \n- Codex issues commands; GitHub executes them  \n- Local development optional  \n- Every environment is disposable and reproducible  \n\n---\n\n## ü§ñ Codex Integration\n\nCodex (or any AI IDE assistant) uses this blueprint as its **canonical context**.\n\nWhen you ask Codex to *‚Äúrun bootstrap‚Äù* or *‚Äúdeploy dev‚Äù* it will:\n1. Issue a `/bootstrap` or `/deploy` comment  \n2. Trigger `chatops.yml` workflow  \n3. Use secrets and infra context defined here  \n\nRecommended context files:\n\n```\nARCHITECTURE.md\n.github/workflows/chatops.yml\nscripts/levelnine_bootstrap_all.sh\nterraform/environments/*\nconfig/provider.config.json\nconfig/env-manifest.json\n```\n\n---\n\n## üß± Future Enhancements\n\n- OPA / Rego policy integration  \n- Cost-aware multi-LLM routing  \n- Observability via Datadog + OpenTelemetry  \n- Secrets vault (1Password / Doppler)  \n- MCP federation for multi-tenant scaling  \n- Fly.io Postgres HA and read replicas  \n\n---\n\n## ü™™ License\n\nMIT License ¬© 2025 LevelNine-Services  \nUse, modify, and distribute freely with attribution.\n\n---\n\n## üß© Quick Start for Codex\n\n1. Open this repo in VSCodium or GitHub Codespaces  \n2. Ensure Codex is logged in  \n3. Use ChatOps commands in Issues or PRs:  \n   ```\n   /bootstrap CONFIRM=YES env=dev\n   /deploy env=dev\n   /db:provision env=demo\n   ```\n4. Monitor progress under **Actions ‚Üí Workflow Runs**  \n5. Codex automatically loads this README and architecture context  \n\n---\n\n## ‚úÖ Summary\n\n**Everything-as-Code. Zero local friction. Codex-aware automation.**\n\nThis blueprint is the **single source of truth** for:\n- Architecture, IaC, CI/CD, environments  \n- ChatOps and automation logic  \n- Security, scaling, and AI provider orchestration  \n\n**Welcome to the LevelNine Cloud-Native AI Stack.**"
}
